load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_executable",
    "ocaml_interface",
    "ocaml_module",
    "ppx_executable",
    "ppx_test",
)

COMMON_OPTS = select({
    "//bzl/config:enable_verbose": ["-verbose"],
    "//conditions:default": [],
}) + []

LINK_OPTS = select({
    "//bzl/config:enable_always_link": ["-linkall"],
    "//conditions:default": [],
}) + []

IMPL_OPTS = COMMON_OPTS + LINK_OPTS + []
INTF_OPTS = COMMON_OPTS + LINK_OPTS + []

PPX_COOKIES = {"-cookie": "ppx_version"}
PPX_ARGS = [
    # do not sort (buildifier)
    "-corrected-suffix",
    ".ppx-corrected",
]

PPX_OUTPUT_FORMAT = "text"

################################################################
test_suite(
    name = "test",
    tests = [
        ":bad_version_syntax_bin_io_in_functor",
        ":bad_version_syntax_extension",
        ":bad_version_syntax_missing_versioned",
        ":bad_version_syntax_multiple_errors",
        # ":bad_version_syntax_version_in_functor.ml",
        ":bad_versioned_in_functor",
        ":bad_versioned_in_nested_functor",

        ":good_version_syntax",

        ":versioned_bad_arrow_type",
        ":versioned_bad_contained_types",
        ":versioned_bad_module_name",
        ":versioned_bad_module_structure",
        ":versioned_bad_option",
        ":versioned_bad_type_name",
        ":versioned_bad_unnumbered",
        ":versioned_bad_version_name",
        ":versioned_bad_wrapped_module_structure",
        ":versioned_module_bad_missing_to_latest",
        ":versioned_module_bad_missing_type",
        ":versioned_module_bad_stable_name",
        ":versioned_module_bad_version_name",
        ":versioned_module_bad_version_order",

        ":versioned_module_good",
        ":versioned_sig_good_ml",
        ":versioned_sig_good_mli",
        ":versioned_good",
    ]
)

################################################################
ppx_test(
    name    = "good_version_syntax",
    src     = "good_version_syntax.ml",
    expect  = "expect/good_version_syntax.ml",
    ppx     = ":ppx",
    timeout = "short"
)

ppx_test(
    name    = "versioned_good",
    src     = "versioned_good.ml",
    expect  = "expect/versioned_good.ml",
    ppx     = ":ppx",
    timeout = "short"
)

ppx_test(
    name    = "bad_version_syntax_bin_io_in_functor",
    src     = "bad_version_syntax_bin_io_in_functor.ml",
    expect  = "expect/bad_version_syntax_bin_io_in_functor.ml",
    ppx     = ":ppx",
    timeout = "short"
)

ppx_test(
    name    = "bad_version_syntax_extension",
    src     = "bad_version_syntax_extension.ml",
    expect  = "expect/bad_version_syntax_extension.ml",
    ppx     = ":ppx",
    timeout = "short"
)

ppx_test(
    name    = "versioned_module_good",
    src     = "versioned_good.ml",
    expect  = "expect/versioned_good.ml",
    ppx     = ":ppx",
    timeout = "short"
)

ppx_test(
    name    = "versioned_sig_good_mli",
    src     = "versioned_sig_good.mli",
    expect  = "expect/versioned_sig_good.mli",
    ppx     = ":ppx",
    cookies = PPX_COOKIES,
    args    = PPX_ARGS,
    timeout = "short"
)

ppx_test(
    name    = "versioned_sig_good_ml",
    src     = "versioned_sig_good.ml",
    expect  = "expect/versioned_sig_good.ml",
    ppx     = ":ppx",
    cookies = PPX_COOKIES,
    args    = PPX_ARGS,
    timeout = "short"
)

ppx_test(
    name    = "bad_version_syntax_missing_versioned",
    src     = "bad_version_syntax_missing_versioned.ml",
    expect  = "expect/bad_version_syntax_missing_versioned.ml",
    ppx     = ":ppx",
    timeout = "short"
)

ppx_test(
    name    = "bad_versioned_in_functor",
    src     = "bad_versioned_in_functor.ml",
    expect  = "expect/bad_versioned_in_functor.ml",
    ppx     = ":ppx",
    timeout = "short"
)

ppx_test(
    name    = "bad_versioned_in_nested_functor",
    src     = "bad_versioned_in_nested_functor.ml",
    expect  = "expect/bad_versioned_in_nested_functor.ml",
    ppx     = ":ppx",
    timeout = "short"
)

ppx_test(
    name          = "bad_version_syntax_multiple_errors",
    src           = "bad_version_syntax_multiple_errors.ml",
    expect        = "expect/bad_version_syntax_multiple_errors.ml",
    ppx           = ":ppx",
    deps          = ["@opam//pkg:core_kernel"],
    timeout       = "short"
)

ppx_test(
    name          = "versioned_bad_module_name",
    src           = "versioned_bad_module_name.ml",
    ppx           = ":ppx",
    expect        = "expect/versioned_bad_module_name.stderr",
    cookies       = PPX_COOKIES,
    args          = PPX_ARGS,
    deps          = ["@opam//pkg:core_kernel"],
    timeout       = "short"
)

ppx_test(
    name          = "versioned_bad_module_structure",
    src           = "versioned_bad_module_structure.ml",
    ppx           = ":ppx",
    expect_stderr = "\n".join([
"File \"test/versioned_bad_module_structure.ml\", line 6, characters 8-35:",
"Error: Versioned type, not a label or variant, must have manifest (right-hand side)"
    ]),
    deps          = ["@opam//pkg:core_kernel"],
    timeout       = "short"
)

ppx_test(
    name          = "versioned_bad_version_name",
    src           = "versioned_bad_version_name.ml",
    ppx           = ":ppx",
    expect_stderr = "\n".join([
"File \"test/versioned_bad_version_name.ml\", line 7, characters 10-37:",
"Error: Versioning module name must be Vn, for a positive number n, which cannot begin with 0, got: \"V01\""
    ]),
    cookies       = PPX_COOKIES,
    args          = PPX_ARGS,
    deps          = ["@opam//pkg:core_kernel"],
    timeout       = "short"
)

ppx_test(
    name          = "versioned_bad_wrapped_module_structure",
    src           = "versioned_bad_wrapped_module_structure.ml",
    ppx           = ":ppx",
    expect_stderr = "\n".join([
"File \"test/versioned_bad_wrapped_module_structure.ml\", line 5, characters 36-43:",
"Error: Ppxlib.Deriving: generator '\\''version'\\'' doesn'\\''t accept argument '\\''wrapped'\\''"
    ]),
    cookies       = PPX_COOKIES,
    args          = PPX_ARGS,
    deps          = ["@opam//pkg:core_kernel"],
    timeout       = "short"
)

ppx_test(
    name          = "versioned_bad_type_name",
    src           = "versioned_bad_type_name.ml",
    expect        = "expect/versioned_bad_type_name.stderr",
    ppx           = ":ppx",
    cookies       = PPX_COOKIES,
    args          = PPX_ARGS,
    deps          = ["@opam//pkg:core_kernel"],
    timeout       = "short"
)

ppx_test(
    name          = "versioned_bad_unnumbered",
    src           = "versioned_bad_unnumbered.ml",
    ppx           = ":ppx",
    expect_stderr = "\n".join([
"File \"test/versioned_bad_unnumbered.ml\", line 4, characters 38-48:",
"Error: Ppxlib.Deriving: generator '\\''version'\\'' doesn'\\'t' accept argument '\\''unnumbered'\\''"
    ]),
    cookies       = PPX_COOKIES,
    args          = PPX_ARGS,
    deps          = ["@opam//pkg:core_kernel"],
    timeout       = "short"
)

ppx_test(
    name          = "versioned_bad_option",
    src           = "versioned_bad_option.ml",
    ppx           = ":ppx",
    expect_stderr = "\n".join([
"File \"test/versioned_bad_option.ml\", line 9, characters 17-26:",
"Error: \"optin\" is neither an OCaml type constructor nor a versioned type"]),
    cookies       = PPX_COOKIES,
    args          = PPX_ARGS,
    deps          = ["@opam//pkg:core_kernel"],
    timeout       = "short"
)

ppx_test(
    name          = "versioned_bad_contained_types",
    src           = "versioned_bad_contained_types.ml",
    expect        = "expect/versioned_bad_contained_types.ml",
    ppx           = ":ppx",
    deps          = ["@opam//pkg:core_kernel"],
    timeout       = "short"
)

ppx_test(
    name          = "versioned_bad_arrow_type",
    src           = "versioned_bad_arrow_type.ml",
    ppx           = ":ppx",
    expect_stderr = "\n".join([
"File \"test/versioned_bad_arrow_type.ml\", line 8, characters 15-28:",
"Error: ppx_bin_shape: unsupported type: int -> string"
    ]),
    cookies       = PPX_COOKIES,
    args          = PPX_ARGS,
    timeout       = "short"
)

ppx_test(
    name          = "versioned_module_bad_stable_name",
    src           = "versioned_module_bad_stable_name.ml",
    expect        = "expect/versioned_module_bad_stable_name.stderr",
    ppx           = ":ppx",
    cookies       = PPX_COOKIES,
    args          = PPX_ARGS,
    timeout       = "short"
)

ppx_test(
    name          = "versioned_module_bad_version_name",
    src           = "versioned_module_bad_version_name.ml",
    expect        = "expect/versioned_module_bad_version_name.stderr",
    ppx           = ":ppx",
    cookies       = PPX_COOKIES,
    args          = PPX_ARGS,
    deps          = ["@opam//pkg:core_kernel"],
    timeout       = "short"
)

ppx_test(
    name          = "versioned_module_bad_missing_type",
    src           = "versioned_module_bad_missing_type.ml",
    expect        = "expect/versioned_module_bad_missing_type.stderr",
    ppx           = ":ppx",
    cookies       = PPX_COOKIES,
    args          = PPX_ARGS,
    deps          = ["@opam//pkg:core_kernel"],
    timeout       = "short"
)

ppx_test(
    name          = "versioned_module_bad_version_order",
    src           = "versioned_module_bad_version_order.ml",
    expect        = "expect/versioned_module_bad_version_order.stderr",
    ppx           = ":ppx",
    cookies       = PPX_COOKIES,
    args          = PPX_ARGS,
    deps          = ["@opam//pkg:core_kernel"],
    timeout       = "short"
)

ppx_test(
    name          = "versioned_module_bad_missing_to_latest",
    expect        = "expect/versioned_module_bad_missing_to_latest.ml",
    src           = "versioned_module_bad_missing_to_latest.ml",
    ppx           = ":ppx",
    deps          = ["@opam//pkg:core_kernel"],
    timeout       = "short"
)

################################################################
ppx_executable(
    name = "ppx",
    srcs = ["@obazl//ppxlib:driver_standalone_runner"],
    opts = select({
        "//bzl/config:enable_verbose": ["-verbose"],
        "//conditions:default": ["-thread"],
    }) + [
        "-linkall",
        "-predicates", "ppx_driver,ppx_deriver",
    ],
    deps = [
        "@opam//pkg:core_kernel",
        "@opam//pkg:ppxlib",
        "@opam//pkg:ppx_jane",
        "@opam//pkg:ppx_deriving_yojson",
        "//src:ppx_version"
    ],
    lazy_deps = ["@opam//pkg:ppx_deriving_yojson.runtime"],
                 # "//src/runtime:ppx_version.runtime"],
    visibility = ["//visibility:public"],
)
