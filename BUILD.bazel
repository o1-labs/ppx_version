load(
    "@obazl_rules_ocaml//ocaml:build.bzl",
    "ppx_archive",
    "ppx_binary",
    "ppx_module",
    "ppx_ns_module",
    "ppx_test",
)

SRCS = [
    "src/bin_io_unversioned.ml",
    "src/dummy_derivers.ml",
    "src/lint_version_syntax.ml",
    "src/serialization.ml",
    "src/versioned_util.ml",
    "src/versioned_module.ml",
    "src/versioned_type.ml",
]

SUBMODULE_OPTS = [
    "-linkall",
    "-thread",
    "-c",
    "-no-alias-deps",
    "-opaque",
    # "-verbose"
]

## Compile the ns module.  No preprocessing.

NS = "ppx_version"

ppx_ns_module(
    name = "ppx_version_ns_module",
    ns = NS,
    submodules = SRCS,
)

## Preprocess, rename, and compile each submodule, in dependency order.
COMMON_DEPS = [
    "@opam//pkg:compiler-libs.common",
    "@opam//pkg:ppxlib",
    "@opam//pkg:ppx_deriving.api",
    "@opam//pkg:ppx_bin_prot",
    "@opam//pkg:core_kernel",
]

ppx_binary(
    name = "ppxlib.Metaquot",
    opts = [
        "-predicates",
        "ppx_driver",
        "-linkall",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "@opam//pkg:base",
        "@opam//pkg:ppxlib",
        "@opam//pkg:ppxlib.metaquot",
        "@opam//pkg:ppxlib.runner",
    ],
)

ppx_module(
    name = "bin_io_unversioned_cm",
    impl = "src/bin_io_unversioned.ml",
    opts = SUBMODULE_OPTS,
    ppx_bin = ":ppxlib.Metaquot",
    ppx_ns_module = ":ppx_version_ns_module",
    deps = COMMON_DEPS + [":versioned_util_cm"],
)

ppx_module(
    name = "dummy_derivers_cm",
    impl = "src/dummy_derivers.ml",
    opts = SUBMODULE_OPTS,
    ppx_bin = ":ppxlib.Metaquot",
    ppx_ns_module = ":ppx_version_ns_module",
    deps = COMMON_DEPS,
)

ppx_module(
    name = "lint_version_syntax_cm",
    impl = "src/lint_version_syntax.ml",
    opts = SUBMODULE_OPTS,
    ppx_bin = ":ppxlib.Metaquot",
    ppx_ns_module = ":ppx_version_ns_module",
    deps = COMMON_DEPS + [":versioned_util_cm"],
)

ppx_module(
    name = "serialization_cm",
    impl = "src/serialization.ml",
    opts = SUBMODULE_OPTS,
    ppx_bin = ":ppxlib.Metaquot",
    ppx_ns_module = ":ppx_version_ns_module",
    deps = COMMON_DEPS,
)

ppx_module(
    name = "versioned_module_cm",
    impl = "src/versioned_module.ml",
    opts = SUBMODULE_OPTS,
    ppx_bin = ":ppxlib.Metaquot",
    ppx_ns_module = ":ppx_version_ns_module",
    deps = COMMON_DEPS + [":versioned_util_cm"],
)

ppx_module(
    name = "versioned_type_cm",
    impl = "src/versioned_type.ml",
    opts = SUBMODULE_OPTS,
    ppx_bin = ":ppxlib.Metaquot",
    ppx_ns_module = ":ppx_version_ns_module",
    deps = COMMON_DEPS + [":versioned_util_cm"],
)

ppx_module(
    name = "versioned_util_cm",
    impl = "src/versioned_util.ml",
    # ppx_bin_opts = ["-cookie", "library-name=\"ppx_version\""],
    opts = SUBMODULE_OPTS,
    ppx_bin = ":ppxlib.Metaquot",
    ppx_ns_module = ":ppx_version_ns_module",
    deps = COMMON_DEPS,
)

## Now link ns module and submodules into archive.
ppx_archive(
    name = "ppx_version",
    msg = "Compiling ppx_version...",
    opts = ["-linkall"],
    visibility = ["//visibility:public"],
    deps = [
        ":ppx_version_ns_module",
        ":versioned_util_cm",
        ":bin_io_unversioned_cm",
        ":dummy_derivers_cm",
        ":lint_version_syntax_cm",
        ":serialization_cm",
        ":versioned_module_cm",
        ":versioned_type_cm",
    ],
)

ppx_archive(
    name = "cmxs",
    archive_name = "ppx_version",
    linkshared = True,
    msg = "Compiling ppx_version...",
    opts = ["-linkall"],
    visibility = ["//visibility:public"],
    deps = [
        ":ppx_version_ns_module",
        ":versioned_util_cm",
        ":bin_io_unversioned_cm",
        ":dummy_derivers_cm",
        ":lint_version_syntax_cm",
        ":serialization_cm",
        ":versioned_module_cm",
        ":versioned_type_cm",
    ],
)

# standalone executable
ppx_binary(
    name = "ppx_version.exe",
    srcs = ["@opam//ppxlib:driver_standalone_shim"],
    opts = [
        "-linkpkg",
        "-linkall",
        "-predicates",
        "ppx_driver",
        "-predicates",
        "ppx_deriver",
        # "-verbose",
    ],
    deps = [
        ":ppx_version",
        "@opam//pkg:compiler-libs.common",
        "@opam//pkg:core_kernel",
        "@opam//pkg:ppx_bin_prot",
        "@opam//pkg:ppxlib",
    ],
)

################################################################
####  EXECUTABLES  ####

## These don't build under dune, so we ignore for now.

################################################################
#### TESTS ####

ppx_binary(
    name = "test_ppx",
    srcs = ["@opam//ppxlib:driver_standalone_shim"],
    opts = [
        "-strict-sequence",
        "-strict-formats",
        "-short-paths",
        "-keep-locs",
        "-g",
        "-predicates",
        "ppx_deriving",
        "-predicates",
        "ppx_driver",
        "-linkpkg",
        # "-verbose",
    ],
    deps = [
        ":ppx_version",
        "@opam//pkg:core_kernel",
        "@opam//pkg:ppx_deriving_yojson",
        "@opam//pkg:ppx_inline_test",
        "@opam//pkg:ppx_jane",
        "@opam//pkg:ppxlib",
    ],
)

# run the tests:  $ bazel test :ppx_version_sh_test
sh_test(
    name = "ppx_version_sh_test",
    srcs = ["test/ppx_version_test.sh"],
    args = [
        "$(location :test_ppx)",
        "foo",
    ],
    data = [
        ":test_ppx",
        # "test/bad_version_syntax_bin_io_in_functor.ml",
        # "test/bad_version_syntax_extension.ml",

        ##FIXME: succeeds, should fail:
        "test/bad_version_syntax_missing_versioned.ml",
        ##FIXME: succeeds, should fail:
        "test/bad_version_syntax_multiple_errors.ml",

        # "test/bad_version_syntax_version_in_functor.ml",

        ##FIXME: succeeds, should fail:
        "test/bad_versioned_in_functor.ml",
        ##FIXME: succeeds, should fail:
        "test/bad_versioned_in_nested_functor.ml",
        "test/versioned_bad_arrow_type.ml",
        "test/versioned_bad_contained_types.ml",
        "test/versioned_bad_module_name.ml",
        "test/versioned_bad_module_structure.ml",
        "test/versioned_bad_option.ml",
        "test/versioned_bad_type_name.ml",
        "test/versioned_bad_unnumbered.ml",
        "test/versioned_bad_version_name.ml",
        "test/versioned_bad_wrapped_module_structure.ml",
        "test/versioned_module_bad_missing_to_latest.ml",
        "test/versioned_module_bad_missing_type.ml",
        "test/versioned_module_bad_stable_name.ml",
        "test/versioned_module_bad_version_name.ml",
        "test/versioned_module_bad_version_order.ml",
        "test/good_version_syntax.ml",
        "test/versioned_good.ml",
        "test/versioned_module_good.ml",
        "test/versioned_sig_good.ml",

        ##FIXME: deal with .mli
        # "test/versioned_sig_good.mli",
    ],
)
